# 클래스로 매개변수와 반환값을 처리하는 데코레이터 만들기

""" 지금까지 클래스로 데코레이터를 만들어보았다. 클래스로 만든 데코레이터도 매개변수와 반환값을 처리할 수 있다.
    다음은 함수의 매개변수를 출력하는 데코레이터이다( 여기서는 위치 인수와 키워드 인수를 모두 처리하는 가변 인수로 만들었다)."""

from typing import Any


class Trace:
    def __init__(self,func) -> None:     # 호출할 함수를 인스턴스의 초깃값으로 받음    
        self.func=func                   # 호출할 함수를 속성 func에 저장   

    def __call__(self, *args, **kwargs) -> Any:     # 호출할 함수의 매개변수를 처리
        r=self.func(*args,**kwargs)                 # self.func에 매개변수를 넣어서 호출하고
                                                    # 반환값을 변수에 저장

        print('{0}(args={1},kwargs{2})->{3}'.format(self.func.__name__,args,kwargs, r))
                                                    # 매개변수와 반환값 출력

        return r                                    # self.func의 반환값을 반환
    

@ Trace
def add(a,b):
    return a+b


print(add(10,20))
print(add(a=10,b=20))


""" 클래스로 매개변수와 반환값을 처리하는 데코레이터를 만들 때는 __call__ 메서드에 매개변수를 지정하고, self.func에 매개변수를
    넣어서 호출한 뒤에 반환값을 반환해주면 된다. 여기서는 매개변수를 *args, **kwargs로 지정했으므로 self.func에 넣었을 때는 인패킹하여
    넣어준다.
    
    물론 가변 인수를 사용하지 않고, 고정된 매개변수를 사용할 대는 def __call__(self,a,b): 처럼 만들어도 된다."""







# 클래스로 매개변수가 있는 데코레이터 만들기

""" 마지막으로 (클래스가)매개변수가 있는 데코레이터를 만들어 보겟다. 다음은 함수의 반환값이 특정 수의 배수인지 확인하는 데코레이터이다."""


class IsMutliple:
    def __init__(self,x) -> None:               # 데코레이터가 사용할 매개변수를 초깃값으로 받음
        self.x=x                                # 매개변수를 속성 x에 저장

    def __call__(self,func):                    # 호출할 함수를 매개변수로 받음
        def wrapper(a,b):                       # 호출할 함수의 매개변수와 똑같이 지정
                                                # (가변 인수로 작성해도 됨)
            r=func(a,b)                         # func를 호출하고 반환값으 변수에 저장

            if r%self.x==0:                     # func의 반환값이 self.x의 배수인지 확인
                print('{0}의 반환값은 {1}의 배수이다.'.format(func.__name__,self.x))
            else:
                print('{0}의 반환값은 {1}의 배수가 이니다.'.format(func.__name__,self.x))
            return r                            # func의 반환값을 반환
        return wrapper                          # wrapper 함수 반환
    




@ IsMutliple(3)     # 데코레이터(인수)
def add(a,b):
    return a+b

print(add(10,20))
print(add(2,5))

# add의 반환값은 3의 배수이다.
# 30
# add의 반환값은 3의 배수가 이니다.
# 7
#
#
#



""" 먼저 __init__ 메서드에서 데코레이터가 사용할 때 매개변수를 초깃값으로 받는다. 그리고 매개변수를 __call__ 메서드에서 사용할 수 있도록
    저장한다."""



""" 지금까지 __init__에서 호출할 함수를 매개변수로 받았는데 여기서는 데코레이터가 사용할 매개변수를 __call__ 메서드에서 사용할 수 있도록 속성에
    저장한다."""


""" 이제 __call__ 메서드에서는 호출할 함수를 매개변수로 받는다. 그리고 __call__ 메서드 안에서 wrapper 함수를 만들어준다. 이때 wrapper 함수의 매개변수는
    호출할 함수의 매개변수와 똑같이 지정해준다(가변 인수로 작성해도 됨)."""


""" wrapper 함수 안에서는 func 반환값이 데코레이터 매개변수 x의 배수인지 확인한다. 이때 데코레이터 매개변수는 x는 속성에 저장되어 있으므로 self.x와
    같이 사용해야 한다. 그리고 배수 확인이 끝났으면 func의 반환값을 반환한다. 마지막으로 wrapper 함수를 다 만들었으면 return으로 wrapper 함수를 반환한다."""


""" 데코레이터를 사용할 때는 데코레이터에 ()(괄호)를 붙인 뒤 인수를 넣어주면 된다."""



""" 지금까지 데코레이터를 사용하는 방법에 대해서 배웠는데 많이 어려웠다. 여기서는 데코레이터가 기존 함수를 수정하지 않으면서 추가 기능을 구현할 때
    사용한다는 점만 기억하면 된다."""