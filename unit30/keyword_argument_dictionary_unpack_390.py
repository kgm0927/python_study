# 키워드 인수와 딕셔너리 언패킹 사용하기

""" 이번에는 딕셔너리를 사용해서 키워드 인수로 값을 넣는 딕셔너리 언패킹을 사용해보겠다. 
    다음과 같이 딕셔너리 앞에 **(애스터리스크 두 개)를 붙여서 함수에 넣어준다.

    * 함수(**딕셔너리)
"""


def personal_info(name,age,address):
    print('이름: ',name)
    print('나이: ',age)
    print('주소: ',address)


""" 이제 딕셔너리에 '키워드':값 형식으로 인수를 저장하고, 앞에 **를 붙여서 함수에 넣어준다. 이때 딕셔너리의 키워드(키) 반드시 문자열
    형태여야 한다."""

x={'name':'홍길동','age':30,'address':'서울시 용산구 이촌동'}
personal_info(**x)
# 이름:  홍길동
# 나이:  30
# 주소:  서울시 용산구 이촌동


""" **x처럼 딕셔너리를 언패킹하면 딕셔너리의 값들이 함수의 인수로 들어간다. 즉, personal_info(name='홍길동',age=30,address='서울시 용산구 이촌동')또는
    personal_info('홍길동',30,'서울시 용산구 이촌동')과 똑같은 동작이 된다."""


""" 딕셔너리 변수 대신 딕셔너리 앞에 바로 **로 붙여도 동작은 같다."""



personal_info(**{'name':'홍길동','age':30,'address':'서울시 용산구 이촌동'})
# 이름:  홍길동
# 나이:  30
# 주소:  서울시 용산구 이촌동


""" 딕셔너리 언패킹을 사용할 때는 매개변수 이름과 딕셔너리의 키 이름이 같아야 한다. 또한, 매개변수 개수와 딕셔너리의 키의 개수도
    같아야 한다."""


""" 만약 이름과 개수가 다르면 함수를 호출할 수 없다."""


# ** 를 두 번 사용하는 이유

""" 그런데 딕셔너리는 **처럼 *를 두 번 사용하는가? 왜냐하면 딕셔너리는 키-값 쌍 형태로 값이 저장되어 있기 때문이다. 먼저 *를 한 번만 사용해서
    함수를 호출해 본다."""


personal_info(*x)
# 이름:  name
# 나이:  age
# 주소:  address



"""personal_info에 *x를 넣으면 x의 키가 출력된다. 즉, 딕셔너리를 한 번 언패킹하면 키를 사용한다는 뜻이 된다. 즉, 딕셔너리를 한 번 언패킹하면 키를
    사용한다는 뜻이 된다. 따라서 **처럼 딕셔너리를 딕셔너리를 두 번 언패킹하여 값을 사용하도록 한다."""

x={'name':'홍길동','age':30,'address':'서울시 용산구 이촌동'}
personal_info(**x)
# 이름:  홍길동
# 나이:  30
# 주소:  서울시 용산구 이촌동




# 키워드 인수를 사용하는 가변 인수 함수 만들기


""" 이번에는 키워드 인수를 사용하는 가변 인수 함수를 만든다. 다음과 같이 키워드 인수를 쓰는 가변 인수 함수는 매개변수 앞에 **를 붙여서 만든다.


    def 함수이름(**매개변수):
        코드

"""

""" 값 여러개를 받아서 매개변수 이름과 값을 각 줄에 출력하는 함수를 만들어보겠다. 함수를 만들 때 괄홍 안에 **kwargs와 같이 매개변수 앞에 **를 붙인다.
    함수 안에서는 for로 kwargs.items()를 반복하면서 print 값을 출력한다."""


def personal_info(**kwargs):
    for kw,arg in kwargs.items():
        print(kw,": ",arg, sep='')


"""매개변수 이름은 원하는 대로 지어도 되지만 관례로 keyword arguments를 줄여서 kwargs로 사용한다. 특히 이 kwargs는 딕셔너리라서 for로 반복할 수 있다."""


""" 그럼 personal_info 함수에 키워드와 값을 넣어서 실행해 본다. 값을 한개 넣어도 되고, 세 개 넣어도 된다."""


personal_info(name='홍길동')
# name: 홍길동

personal_info(name='홍길동',age=30,address='서울시 용산구 이촌동')
# name: 홍길동
# age: 30
# address: 서울시 용산구 이촌동
 


""" 이렇게 인수를 직접 넣어도 되고, 딕셔너리 언패킹을 써도 된다. 다음과 같이 딕셔너리를 만들고 앞에 **를 붙여서 넣어본다."""


""" 이처럼 함수를 만들 때 def personal_info(**kwargs): 와 같이 매개변수에 **를 붙여주면 키워드 인수를 사용하는 가변 인수 함수를
    만들 수 있다. 그리고 이런 함수를 호출할 때는 키워드와 인수를 각각 넣거나 딕셔너리 언패킹을 사용하면 된다."""

""" 보통 **kwargs를 사용한 가변 인수 함수는 다음과 같이 함수 안에서 특정 키가 있는지 확인한 뒤 해당 기능을 만든다."""


def personal_info(**kwargs):
    if 'name' in kwargs:
        print('이름: ',kwargs['name'])
    if 'age' in kwargs:
        print('나이: ',kwargs['age'])
    if 'address' in kwargs:
        print('주소: ',kwargs['address'])




# 참고: 고정 인수와 가변 인수(키워드 인수)를 함께 사용하기
""" 고정 인수와 가변 인수(키워드 인수)를 함께 사용할 때는 다음과 같이 고정 매개변수를 먼저 지정하고, 그 다음 매개변수에 **를 붙여주면 된다."""


def personal_info(name,**kwargs):
    print(name)
    print(**kwargs)




# 참고: 위치 인수와 키워드 인수를 함께 사용하기


""" 함수에서 위치 인수를 받는 *args와 키워드 인수를 받는 **kwargs를 함께 사용할 수도 있다. 대표적인 함수가 print 인데 print는 출력할 값을
    위치 인수로 넣고, sep,end 등의 키워드 인수로 넣는다. 다음과 같이 함수의 매개변수를 *args, **kwargs로 지정하면 위치 인수와 키워드 인수를 함께
    사용한다."""

def custom_print(*args,**kwargs):
    print(*args,**kwargs)


custom_print(1,2,3, sep=':',end='')
# 1:2:3


""" 단, 이때 def custom_print(**kwargs, *args): 처럼 **kwargs가 *args보다 앞에 오면 안된다. 매개변수 순서에서 **kwargs는 반드시 뒤에 나와야 한다."""


""" 특히 고정 매개변수와 *args, **kwargs를 함께 쓴다면 def custom_print(a,b,*args, **kwargs): 처럼 매개변수는 고정 매개변수 *args, **kwargs 순으로
    지정해야 한다."""