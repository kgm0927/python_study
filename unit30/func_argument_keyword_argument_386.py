# 함수에서 위치 인수와 키워드 인수 사용하기

""" 이번에는 함수에서 위치 인수, 키워드 인수를 사용하는 방법과 리스트,
    딕셔너리 언패킹(unpacking)을 활용하는 방법을 알아본다."""







# 위치 인수와 리스트 언패킹 사용하기


""" 다음과 같이 함수에 인수를 순서대로 넣는 방식을 위치 인수(positional argument)라고 한다. 즉,
    인수의 위치가 정해져 있다."""


print(10,20,30)
# 10 20 30

""" print에 10,20,30 순으로 넣었으므로 출력될 때도 10 20 30으로 출력된다. 우리가 지금까지 흔히 사용한 방식이다."""





# 위치 인수를 사용하는 함수를 만들고 호출하기

def print_number(a,b,c):
    print(a)
    print(b)
    print(c)




"""print_number에 숫자 세 개를 넣으면 각 줄에 숫자가 출력된다."""

print_number(10,20,30)
# 10
# 20
# 30




# 언패킹 사용하기

""" 이렇게 인수를 순서대로 넣을 때는 리스트나 튜플을 사용할 수도 있다. 다음과 같ㅌ이 리스트 또는 튜플 앞에 *(애스터리스크)를 붙여서
    함수에 넣어주면 된다.
    
    
        * 함수(*리스트)
        * 함수(*튜플)

    """

x=[10,20,30]
print_number(*x)
# 10
# 20
# 30



""" print_numbers에 10,20,30이 들어있는 리스트x를 넣고 *만 붙였는데도 숫자가 각 줄에 출력되었다. 즉, 리스트(튜플) 앞에 *를 붙이면 언패킹(unpacking)이
    되어서 print_numbers(10,20,30)과 똑같은 동작이 된다. 말 그대로 리스트의 포장을 푼다는 의미가 된다."""


"""리스트 변수 대신 리스트 앞에 바로 *를 붙여도 동작은 같다."""


print_number(*[10,20,30])
# 10
# 20
# 30


""" 단, 이때 함수의 매개변수 개수와 리스트의 요소 개수는 같아야 한다. 만약 개수가 다르다면 함수를 호출할 수 없다. 여기서는 함수를
    def print_number(a,b,c):로 만들었으므로 리스트에는 요소를 3개 넣어야 한다. 그렇지 않으면 에러가 발생한다."""



# 가변 인수 함수

""" 그러면 위치 인수와 리스트 언패킹은 어디에 사용해야 할까? 이 기능들은 인수의 개수가 정해지지 않은 가변 인수(variable argument)에
사용한다. 즉, 같은 함수에 인수 한 개를 넣을 수도 있고, 열 개를 넣을 수 있다. 또는, 인수를 넣지 않을 수도 있다.

다음과 같이 가변 인수 함수는 매개변수 앞에 *를 붙여서 만든다.


    def 함수이름(*매개변수):
        코드


"""


""" 이제 숫자 여러 개를 받고, 숫자를 각 줄에 출력하는 함수를 만들어보겠다. 다음과 같이 함수를 만들 대 괄호 안에 *args와 가이 매개변수 앞에
    *를 붙인다. 그리고 함수 안에서는 for로 args를 반복하면서 print로 값을 출력한다."""


def print_numbers(*args):
    for arg in args:
        print(arg)


""" 그럼 print_numbers 함수에 숫자를 넣엇 호출해본다. 숫자를 한 개 넣으면 한 개 출력되고, 네 개 넣으면 네 개가 출력이 된다. 즉, 넣은 숫자 개수만큼 출력이 된다.
"""

print_numbers(10)
# 10


print_numbers(10,20,30,40)
# 10
# 20
# 30
# 40


"""이렇게 함수에 인수 여러 개를 직접 넣어도 되고, 리스트(튜플) 언패킹을 써도 된다. 다음과 같이 숫자가 들어있는 리스트를 만들고 앞에 *를 넣어서
    해 본다."""



x=[10]
print_numbers(*x)
# 10

y=[10,20,30,40]
print_numbers(*y)
# 10
# 20
# 30
# 40



""" 이처럼 함수를 만들 때 def print_numbers(*args): 와 같이 매개변수에 *를 붙여주면 갑녀 인수 함수를 만들 수 있다. 그리고 이런 함수를 호출할 때는
    인수를 각각 넣거나, 리스트(튜플) 언패킹을 사용하면 된다."""



# 참고: 고정 인수와 가변 인수를 함께 사용하기

""" 고정 인수와 가변 인수를 함께 사용할 때는 다음과 같이 고정 매개변수를 먼저 지정하고, 그 다음 매개변수에 *를 붙여주면 된다."""


def print_numbers(a,*args):
    print(a)
    print(args)


print_numbers(1)
# 1
# ()

print_numbers(1,10,20)
# 1
# (10, 20)

print_numbers(*[10,20,30])
# 10
# (20,30)


"""단, 이때 def print_numbers(*args,a): 처럼 *args가 고정 매개변수보다 앞쪽에 오면 안된다. 매개변수 순서에서 *args는 반드시 가장 뒤쪽에
    와야 한다."""



