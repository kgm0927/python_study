# 클래스 사용하기

""" 클래스는 객체를 표현하기 위한 문법이다. 예를 들어 게임을 만든다고 할 때, 기사, 마법사, 궁수, 사제 등 직업별로 클래스로 만들어서 표현할 수 있다."""

""" 객체 : 특정한 개념이나 모양으로 존재하는 것
    클래스 : 프로그래밍으로 객체를 만들 때 사용하는 것을 의미한다.
    
    클래스를 표현하려면 무엇이 필요한가> 여기서 속성(attribute)과 메서드(method)가 필요하다.
    
    이렇게 프로그래밍 방법을 객체지향(object oriented) 프로그래밍이라고 한다. 객체지향 프로그래밍은 복잡한 문제를 잘게 나누어 객체로 만들고,
    객체를 조합해서 문제를 해결한다. 따라서 현실세계의 복잡한 문제를 처리하는데 유리하면 기능을 개선하고 발전시킬 때도 해당 클래스만 수정되면
    되므로 유지 보수에도 효율적이다.
    
    지금까지 숫자 1,2,3 문자 'a','b','c', 리스트, 딕셔너리 등을 조합해서 프로그램을 만들었는데 사실 파이썬에서는 이 모든 것이 객체이다.
    
    """



# 클래스와 메서드 만들기

""" 클래스는 class에 클래스 이름을 지정하고, :(콜론)을 붙인뒤 다음 줄부터 def로 메서드를 작성하면 된다. 여기서 메서드는 클래스 안에 들어있는 함수를 의미한다.
    
    클래스 이름을 짓는 방법은 변수와 같다. 보통 파이썬에서는 클래스의 이름은 대문자로 시작한다. 그리고 메서드 작성 방법은 함수와 같으며 코드는 반드시 들여쓰기를
    해야한다. 특히 메서드의 첫 번째 매개변수는 self를 지정해야 한다.
    
    
    class 클래스 이름:
        def 메서드(self):
            코드
    
    
    """


class Person:
    def greeting(self):
        print('Hello')


""" 만약 클래스를 사용하고자 한다면, 클래스에 ()(괄호)를 붙인 뒤 변수에 할당한다.

    * 인스턴스=클래스()

"""

james=Person()

""" Person으로 변수 james를 만들었는데 이 james가 Person의 인스턴스(instance)이다. 클래스는 특정 개념을 표현만 할 뿐 사용을 하려면
    인스턴스를 생성해야 한다."""



# 메서드 호출하기

""" 이제 메서드를 호출해보겠다. 메서드는 클래스가 아니라 인스턴스를 호출한다. 다음과 같이 인스턴스 뒤에 .(점)을 붙이고 메서드를 호출하면 된다.


    * 인스턴스.메서드()
"""


james.greeting()
# Hello


""" james.greeting()을 호출하니 'Hello'가 출력되었다. 이렇게 인스턴스를 통해서 호출하는 메서드를 '인스턴스 메서드'라고 부른다."""



# 파이썬에서 흔히 볼 수 있는 클래스


""" 지금까지 사용한 int, list, dict 등도 사실은 클래스이다. 우리는 이 클래스로 인스턴스를 만들고 메서드를 사용했다."""

a=int(10)
print(a)
# 10

b=list(range(20))
print(b)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]


c=dict(x=10,y=20)
print(c)
# {'x': 10, 'y': 20}


"""int 클래스에 10을 넣어서 인스턴스 a를 만들었다. 마찬가지로 list 클래스에서 range(10)을 넣어서
    인스턴스 b를 만들고, dict 클래스에 x=10, y=20을 넣어서 인스턴스 c를 만들었다. 잘 보면 Person으로
    인스턴스를 만드는 방법과 똑같다.
    
    
    물론 정수는 매우 자주 사용하므로 int를 생략하고 10을 바로 넣는다. 그리고 리스트와 딕셔너리도 자주 사용하므로
    축약된 문법인 []와 {}를 제공하지만 클래스인 것은 같다.
    
    다음과 같이 리스트를 조작할 때 메서드를 사용했다. 인스턴스 b에서 메서드 append를 호출해서 값을 추가한다. 이 
    부분도 지금까지 메서드를 만들고 사용한 것과 같은 방식이다."""


b=list(range(10))
b.append(20)

print(b)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20]



""" 즉, 파이썬에서는 자료형도 클래스이다. 다음과 같이 type을 사용하면 객체(인스턴스)가 어떤 클래스인지 확인할 수 있다.



        * type(객체)"""


a=10
print(type(a))
# <class 'int'>


b=[0,1,2]
print(type(b))
# <class 'list'>

c={'x':10,'y':20}
print(type(c))
# <class 'dict'>

maria=Person()
print(type(maria))
# <class '__main__.Person'>

# 인스턴스와 객체의 차이점?

""" 클래스의 객체를 표현하는 문법이라고 했는데, 클래스로 인스턴스를 만드는 것을 보면 헷갈리는 게 있다. 사실 인스턴스와 객체는 같은 것을 뜻한다.
    보통 객체만 지칭할 때는 그냥 객체(object)라고 한다. 하지만 클래스와 연관 지어서 말할 때는 인스턴스(instance)라고 한다. 그래서 다음과 같이 리스트 변수
    a,b가 있다면, a,b는 객체이다. 그리고 a와 b는 list 클래스의 인스턴스이다."""

a=list(range(10))
print(a)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


b=list(range(20))
print(b)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]



# 참고: 빈 클래스 만들기

""" 내용이 없는 빈 클래스를 만들 때는 코드 부분에 pass를 넣어준다.

    class Person:
        pass"""


# 참고: 메서드 안에서 메서드 호출하기


""" 메서드 안에서 메서드를 호출할 때는 다음과 같이 self.메서드() 형식으로 호출해야 한다. self 없이 메서드 이름만 사용하면 클래스 바깥 쪽에 있는
    함수를 호출한다는 뜻이 되므로 주의해야 한다."""

class Person:
    def greeting(self):
        print('Hello')

    def hello(self):
        self.greeting()

james=Person()
james.hello()

# Hello



# 참고: 특정 클래스의 인스턴스인지 확인하기

""" 현재 인스턴스가 특정 클래스의 인스턴스인지 확인할 때는 isinstance 함수를 사용한다. 특정 클래스의 인스턴스가 맞으면 True, 아니면 False를 반환한다.

    *isinstance(인스텐스, 클래스)"""


class Person:
    pass


james=Person()
print(isinstance(james,Person))
# True


""" isinstance는 주로 객체의 자료형을 판단할 때 사용한다. 예를 들어 팩토리얼 함수는 1부터 n까지 양의 정수를 차례대로 곱해야 하는데, 실수와 음수는
    계산할 수 없다. 이런 경우에 isinstance를 사용해서 숫자(객체)가 정수일 때만 계산하도록 만들 수 있다."""

def factorial(n):
    if not isinstance(n,int ) or n<0:   # n이 정수가 아니거나 음수이면 함수를 끝낸다.
        return None
    if n==1:
        return 1
    return n*factorial(n-1)
