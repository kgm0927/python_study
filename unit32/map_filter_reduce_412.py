""" 이제 람다 표현식과 map, filter,reduce 함수를 함께 사용해보겠다."""


# 람다 표현식에서 조건부 표현식 사용하기


""" 먼저 람다 표현식에서 조건부 표현식을 사용하는 방법을 알아보겠다.


    * lambda 매개변수들: 식1 if 조건식 else 식2

"""

""" 다음은 map을 사용하여 리스트 a에서 3의 배수를 문자열로 반환한다."""


a=[1,2,3,4,5,6,7,8,9,10]
print(list(map(lambda x: 
               str(x) if x%3==0 else x,a)))

# [1, 2, '3', 4, 5, '6', 7, 8, '9', 10]


""" map 은 리스트의 요소를 각각 처리하므로 lambda의 반환값도 요소라야 한다. 여기서는 요소가 3의 배수일 때는 str(x)로 요소를
    문자열로 만들어서 반환했고, 3의 배수가 아닐 때는 x로 요소를 그대로 반환했다."""



""" 람다 표현식 안에서 조건부 표현식 if, else를 사용할 때는 :(콜론)을 붙이지 않는다. 일반적인 if ,else와 문법이 다르므로 주의해야
    한다. 조건부 표현식은 식1 if 조건식 else 식2 형식으로 사용하며 식1은 조건식이 참 일때, 식2는 조건식이 거짓일 때 사용할 식이다.
    
    
    특히 람다 표현식에서 if를 사용했다면 반드시 else를 사용해야 한다. 다음과 같이 if 만 사용하면 문법 에러가 발생하므로 주의해야 한다.
    
    print(list(map(lambda x:str(x) if x%3== 0,a)))
    
    """


""" 그리고 람다 표현식 안에서는 elif를 사용할 수 없다. 따라서 조건부 표현식은 식1 if 조건식1 else 식2 if 조건식2 else 식3 형식처럼 if를 연속으로
    사용해야 한다. 예를 들어 리스트에서 1은 문자열로 변환하고, 2는 실수로 변환, 3 이상은 10을 더하는 식은 다음과 같이 만든다.
    
    
        * lambda 매개변수들: 식1 if 조건식1 else 식2 if 조건식2 else 식3
    
    
    """



a=[1,2,3,4,5,6,7,8,9,10]
print(list(map(lambda x: str(x)
                if x==1 else float(x) 

                if x==2 else x+10,a)))
 
 
# ['1', 2.0, 13, 14, 15, 16, 17, 18, 19, 20]



""" 하지만 별로 복잡하지 않은 조건인데도 알아보기가 힘들다. 이런 경우에는 억지로 람다 표현식을 사용하기보다는 그냥 def로 함수를 만들고
    if, elif, else를 사용하는 것을 권장한다."""



def f(x):
    if x==1:
        return str(x)
    elif x==2:
        return float(x)
    else:
        return x+10
    

a=[1,2,3,4,5,6,7,8,9,10]
print(list(map(f,a)))
