# 코루틴 사용하기

""" 지금까지 함수를 호출한 뒤 함수가 끝나면 현재 코드로 다시 돌아왔다. 예를 들어서 다음과 같이 calc 함수 안에서
    add 함수를 호출했을 때 add함수가 끝나면 다시 calc 함수로 돌아온다. 특히 add 함수가 끝나면 이 함수에 들어있던
    변수와 계산식은 모두 사라진다."""


def add(a,b):
    c=a+b       # abb 함수가 끝나면 변수와 계산식은 사라짐
    print(c)
    print('add 함수')

def calc():
    add(1,2)
    print('calc 함수')


""" calc가 메인 루틴(main routine)이면 add는 calc의 서브 루틴(sub routine)이다. 이 메인 루틴과 서브 루틴의 동작 과정을 그림으로 나타내면
    다음과 같은 모양이 된다."""


""" 메인 루틴에서 서브 루틴을 호출하면 서브 루틴의 코드를 실행한 뒤 다시 메인 루틴으로 돌아온다. 특히 서브 루틴이 끝나면 서브 루틴의 내용은 모두
    사라진다."""

""" 하지만 코루틴은 방식이 조금 다르다. 코루틴(corountine)은 cooperative routine를 의미하는데 서로 협력하는 루틴이라는 뜻이다. 즉, 메인루틴과 서브 루틴이
    종속된 관계가 아니라 서로 대등한 관계이며 특정 시점에 상대방의 코드를 실행한다. """


""" 이처럼 코루틴은 함수가 종료되지 않은 상태에서 메인 루틴의 코드를 실행한 뒤 다시 돌아와서 코루틴의 코드를 실행한다. 따라서 코루틴이 종료되지 않았으므로
    코루틴의 내용도 계속 유지가 된다.
    
    코루틴은 코드를 여러 번 실행할 수 있다. 참고로 함수의 코드를 실행하는 지점을 진입점(entry point)이라고 하는데, 코루틴은 진입점이 여러 개인 함수이다."""