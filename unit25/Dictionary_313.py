# 딕셔너리 응용하기


# 딕셔너리에 키-값 쌍 추가하기

""" 딕셔너리의 중요한 기능 중 하나가 바로 키-값 쌍 추가이다. 다음과 같이
    딕셔너리에 키-값 쌍을 추가하는 메서드는 두가지가 있다."""


# setdefault: 키-값 쌍 추가
# update: 키의 값 수정, 키가 없으면 키-값 쌍 추가




# 딕셔너리에 키와 기본값 저장하기

"""setdefault(키)는 딕셔너리에 키-값 쌍을 추가한다. setdefault에 키만 지정하면 값에
    None을 저장한다. 다음은 키 'e'를 추가하고 값에 None을 저장한다."""

x={'a':10, 'b':20, 'c':30, 'd':40}

x.setdefault('e')
print(x)
# {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': None}

""" setdefault(키, 기본값)처럼 키와 기본값을 지정하면 값에 기본값을 저장한 뒤 해당 값을 반환한다. 다음은
    키 'f'를 추가하고 값에 100을 저장한 뒤 100을 반환한다. """



x.setdefault('f',100)
print(x)
# {'a': 10, 'b': 20, 'c': 30, 'd': 40, 'e': None, 'f': 100}



# 딕셔너리에서 키의 값 수정하기

""" 'update(키=값)'은 이름 그대로 딕셔너리에서 키의 값을 수정한다. 예를 들어 딕셔너리가 x={'a':10}이라면
    x.update(a=90)과 같이 키에서 작은 따옴표 또는 큰따옴포를 빼고 키 이름과 값을 지정한다."""

x={'a':10, 'b':20, 'c':30, 'd':40}
x.update(a=90)

print(x)
# {'a': 90, 'b': 20, 'c': 30, 'd': 40}


""" 만약에 딕셔너리에 키가 없다면 키-값 쌍을 추가한다."""

x.update(e=50)
print(x)
# {'a': 90, 'b': 20, 'c': 30, 'd': 40, 'e': 50}



""" update는 키-값 쌍 여러 개를 콤마로 구분해서 넣어주면 값을 한꺼번에 수정할 수 있다. 이때도
    키가 있으면 해당 키의 값을 수정하고 없으면 키-값 쌍을 추가한다. 다음은 키'a'의 값을 900으로 수정하고
    'f':60을 추가한다."""


x.update(a=900,f=60)
print(x)
# {'a': 900, 'b': 20, 'c': 30, 'd': 40, 'e': 50, 'f': 60}



""" update(키=값)은 키가 문자열일 때만 사용할 수 있다. 만약 키가 숫자일 경우는 update(딕셔너리)처럼 딕셔너리를
넣어서 값을 수정할 수 있다."""

y={1:'one',2:'two'}
y.update({1:'ONE',3:'THREE'})
print(y)
# {1: 'ONE', 2: 'two', 3: 'THREE'}




""" update(리스트), update(튜플)은 리스트와 튜플로 값을 수정한다. 여기서 리스트는 [[키1,값1],[키2, 값]] 형식으로 키와 값을 리스트로 만들고 이 리스트를
다시 리스트 안에 넣어서 키-값 쌍을 나열해준다."""

y.update([[2,'TWO'],[4,'FOUR']])
print(y)
# {1: 'ONE', 2: 'TWO', 3: 'THREE', 4: 'FOUR'}



""" 특히 update(반복가능한객체)는 키-값 쌍으로 된 반복 가능ㅎ나 객체로 값을 수정한다. 즉, 다음과 같이 키 리스트와 값 리스트를 묶은 zip 객체로
값을 수정할 수 있다. 즉, 다음과 같이 키 리스트와 값 리스트를 묶은 zip 객체로 값을 수정할 수 있다."""


y.update(zip([1,2],['one','two']))
print(y)
# {1: 'one', 2: 'two', 3: 'THREE', 4: 'FOUR'}






# 딕셔너리에서 키-값 쌍 삭제하기

"""pop(키)는 딕셔너리에서 특정 키-값 쌍을 삭제한 뒤 삭제한 값을 반환한다. 다음은 딕셔너리 x에서
키 'a'를 삭제한 뒤 10을 반환한다. """

x={'a':10, 'b':20, 'c':30, 'd':40}
x.pop('a')
print(x)

# {'b': 20, 'c': 30, 'd': 40}

""" pop(키, 기본값)처럼 기본값을 지정하면 딕셔너리에 키가 있을 때는 해당 키-값 쌍을 삭제한 뒤
값을 반환하지만 키가 없을 때는 기본값만 반환한다."""

""" 딕셔너리 x에는 키 'z'가 없으므로 기본값으로 지정한 0을 반환한다."""

x={'a':10, 'b':20, 'c':30, 'd':40}
print(x.pop('z',0))




# 딕셔너리에서 임의의 키-값 쌍 삭제하기

"""popitem()은 딕셔너리에서 임의의 키-값 쌍을 삭제한 뒤 식제한 키-값 쌍을 튜플로 반환한다. 이 메서드는
파이썬 버전에 따라 동작이 달라지는데, 파이썬 3.6 이상에는 마지막 키-값 쌍을 삭제하며 3.5 이하애는 임의의 키-
값 쌍을 삭제한다."""


x={'a':10, 'b':20, 'c':30, 'd':40}
print(x.popitem())
# ('d', 40)

print(x)
# {'a': 10, 'b': 20, 'c': 30}







# 딕셔너리의 모든 키-값 쌍을 삭제하기


"""clear()는 딕셔너리의 모든 키-값 쌍을 삭제한다. 다음은 딕셔너리 x의 모든 키-값 쌍을 삭제하여 빈 딕셔너리
    {}가 된다."""

x={'a':10, 'b':20, 'c':30, 'd':40}
x.clear()
print(x)





# 딕셔너리에서 키의 값을 가져오기

""" get(키)는 딕셔너리에서 특정 키의 값을 가져온다. 다음은 딕셔너리 x에서 키 'a'의 값을 가져온다."""

x={'a':10, 'b':20, 'c':30, 'd':40}
print(x.get('a'))



""" get(키, 기본값)처럼 기본값을 지정하면 딕셔너리에 키가 있을 때는 해당 키의 값을 반환하지만 키가 없을 때는
    기본 값을 반환한다. 딕셔너리 x에는 키 'z'가 없으므로 기본값으로 지정한 0을 반환한다."""

print(x.get('z',0))





# 딕셔너리에서 키-값 쌍을 모두 가져오기

""" 딕셔너리는 키와 값을 가져오는 다양한 메서드를 제공한다.


    * items: 키-값 쌍을 모두 가져온다.
    * keys: 키를 모두 가져온다.
    * values: 값을 모두 가져옴
    
    """

""" 다음과 같이 items()는 딕셔너리의 키-값 쌍을 모두 가져온다."""


x={'a':10, 'b':20, 'c':30, 'd':40}
print(x.items())
# dict_items([('a', 10), ('b', 20), ('c', 30), ('d', 40)])



""" keys()는 키를 모두 가져온다."""
print(x.keys())
# dict_keys(['a', 'b', 'c', 'd'])



""" values()는 값을 모두 가져온다."""
print(x.values())
# dict_values([10, 20, 30, 40])





# 리스트와 튜플로 딕셔너리 만들기

""" dict.fromkeys(키리스트)는 키 리스트로 딕셔너리를 생성하여 값은 모두 None으로 저장한다."""

import Dictionary_313

keys=['a','b','c','d']
x=dict.fromkeys(keys)
print(x)
# {'a': None, 'b': None, 'c': None, 'd': None}


"""dict.fromkeys(키리스트,값)처럼 키 리스트와 값을 지정하면 해당 값이 키의 값으로 저장된다."""

y=dict.fromkeys(keys,100)
print(y)


# 참고

""" 지금까지 사용한 딕셔너리(dict)는 없는 키에 접근했을 경우 에러가 발생한다.

    그러면 에러가 발생하지 않게 하려면 defaultdict를 사용한다. defaultdict는 collections 모듈에 있고,
    기본값 생성 함수를 넣는다.
    
    * defaultdict(기본값생성함수)
    
    """

""" 다음은 기본값이 0인 defaultdict 딕셔너리를 만든다."""

from collections import defaultdict # collections 모듈에서 defaultdict를 가져옴

y= defaultdict(int) # int로 기본값 생성


""" 딕셔너리 y에는 키 'z'가 없지만 y['z']와 같이 키의 값을 가져와 보면 0이 나온다. 왜냐하면 기본값을 0으로 정했기 때문이다."""

print(y['z'])
# 0

"""defaultdict(int)처럼 int를 넣었는데 기본값이 왜 0인지 의문이 있을 수 있다. int는 실수나 문자열을 정수로 변환하지만, 다음과 같이
int에 아무것도 넣지 않고 호출하면 0을 반환한다."""

print(int())
# 0
print (y)


"""defaultdict에는 특정 값을 반환하는 함수를 넣어주면 되는데, defaultdict(int)는 기본값 생성 함수로 int를 지정하여 0이 나오도록 만든
    것이다. 0이 아닌 다른 값을 기본값으로 설정하고 싶다면 다음과 같이 기본값 생성 함수를 만들어서 넣어 주면 된다."""

z=defaultdict(lambda:'python')
print(z['a'])

print(z[0])