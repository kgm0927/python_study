# 문자열 서실 지정자와 포매팅 사용하기

""" 파이썬은 다양한 방법으로 문자열을 만들 수 있다. 그 중에서 서식 지정자(format specifier)로 문자열을 만드는 방법과
    format 메서드로 문자열을 만드는 포매팅(string formatting)에 대해 알아보겠다."""





# 서식 지정자로 문자열 넣기

""" '%s' % '문자열' """

print('I am %s.' % 'james')

""" 서식 지정자는 %로 시작하고 자료형을 뜻하는 문자가 붙는다. %s는 문자열이라는 뜻이며 string의 s이다.
    이처럼 문자열 안에 %s를 넣고 그 뒤에 %를 붙인 뒤 'james'를 지정해주면 %s 부분이 'james'로 바뀐다
    ('I am %s.'와 'james' 사이의 %는 따옴표로 묶지 않고 그대로 입력해야 한다.)."""

name='maria'
print('I am %s.' % name)



# 서식 지정자로 숫자 넣기

""" '%d' % 숫자"""

print('I am %d years old.'% 20)




""" 숫자는 %d를 넣고 % 뒤에 숫자를 지정하면 된다. %d는 10진 정수 decimal integer의 d이다."""




# 서식 지정자로 소수점 표현하기

""" 숫자 중에 소수점으로 된 실수를 넣어야 할 경우도 있다."""

""" '%f' % 숫자 """

print( '%f' % 2.3)


""" 실수를 넣을 때에는 %f를 사용하여 고정 소수점 fixed point의 f이다. %f는 기본적으로 소수점 이하 6자리까지 표시하므로
    2.3dms 2.300000으로 표시한다."""


""" 소수점 이하 자릿수를 지정하고 싶다면 다음과 같이 f 앞에, .(점)과 자릿수를 지정해주면 된다."""

print('%.2f' % 2.3)
# '2.30'

print('%.3f' % 2.3)
# '2.300'




# 서식 지정자로 문자열 정렬하기

""" 다음과 같이 % 뒤에 숫자를 붙이면 문자열을 지정된 길이로 만든 뒤 오른쪽으로 정렬하고 남은 공간을 공백으로 채운다."""

""" %길이s"""

print('%10s' % 'python')
# '    python'


""" %10s는 문자열의 길이를 10으로 만든 뒤 지정된 문자열을 넣고 오른쪽으로 정렬한다. 따라서 문자열 'python'은 길이가 6이므로
왼쪽 공간을 공백 4칸으로 채운다. """


""" 그럼 왼쪽 정렬은 어떻게 할까? 왼쪽 정렬은 문자열 길이에 -를 붙여주면 된다."""
""" %-길이s"""

print('%-10s' % 'python')
#'python     '




# 서식 지정자로 문자열 안에 값 여러 개 넣기


""" 지금까지 문자열 안에 값을 한 개만 넣었는데, 값을 여러 개 넣으려면 어떻게 해야 할까?

문자열 안에 값을 두 개 이상 넣으려면 %를 붙이고, 괄호 안에 값(변수)을 콤마로 구분해서 넣어주면 된다.
특히 값을 괄호로 묶지 않으면 에러가 발생하므로 주의해야 한다."""


print('Today is %d %s.' % (3, 'April'))

""" 여기서는 서식 지정자가 두 개이므로 값도 두 개 넣었다. 이처럼 서식 지정자가 여러 개면 괄호 안의 값(변수) 개수도
서식 지정자 개수와 똑같이 맞춰주어야 한다."""





# format 메서드 사용하기

""" 파이썬은 문자열을 만들 때 서식 지정자 방식보다 더 간단한 문자열 포매팅(string formatting)을 제공한다.
    문자열 포매팅은 {}(중괄호)안에 포매팅을 지정하고 format 메서드로 값을 넣는다."""


print('Hello, {0}'.format('world!'))
# Hello, world!

print('Hello, {0}'.format(100))
# Hello, 100



# format 메서드로 값을 여러 개 넣기

""" 인덱스의 순서와 format에 지정된 값의 순서를 주목해라."""

print('Hello, {0} {2} {1}'.format('Python','Script',3.6))
# Hello, Python 3.6 Script



# format 메서드로 같은 값을 여러 개 넣기

""" 같은 인덱스가 지정된 {}를 여러 개 넣으면 같은 값이 여러 개 들어간다. 다음은 문자열에 'Python'이 두개, 
    'Script'가 두 개 들어간다."""

print('{0} {0} {1} {1}'.format('Python','Script'))
# Python Python Script Script





# format 메서드에서 인덱스 생략하기

"""만약 {}에서 인덱스를 생략하면 format에 지정한 순서대로 값이 들어간다."""

print('Hello, {} {} {}'.format('Python','Script',3.6))
# Hello, Python Script 3.6




#format 메서드에서 인덱스 대신 이름 지정하기

print('Hello {language} {version}'.format(language='Python',version=3.6))
# Hello Python 3.6


""" {language}와 {version}처럼 {}에 이름을 지정했다. format에는 format(language='Python',version=3.6)
    과 같이 이름에 해당하는 값을 지정해주면 된다."""



# 문자열 포매팅에 변수를 그대로 사용하기

""" 다음과 같이 변수에 값을 넣고 {}에 변수 이름을 지정하면 된다. 이때는 앞에 포매팅(formatting)이라는 뜻으로
    f를 붙인다."""

language='Python'
version=3.6
print(f'Hello, {language} {version}')
# Hello, Python 3.6




# 참고

""" {}중괄호 자체를 출력할 때는 {{, }}처럼 중괄호를 두 번 사용하면 된다."""

print('{{ {0} }}'.format('Python'))
# { Python }



# format 메서드로 문자열 정렬하기

""" 다음과 같이 인덱스 뒤에 :(콜론)을 붙이고 정렬할 방향과 길이를 지정해 주면 된다."""

""" '{인덱스:<길이}.format(값)' """


print('{0:<10}'.format('python'))
# 'python     '

""" {0:<10}은 부등호 방향이 왼쪽을 가리키고 있는데, 문자열을 지정된 길이로 만든 뒤 왼쪽으로 정렬하고 남는 공간을 공백으로 채운다. """








""" 다음과 같이 >을 넣어서 오른쪽을 가리키도록 만들면 문자열을 지정된 길이로 만든 뒤 오른쪽으로 정렬하고 남은 공간을 공백으로 채운다."""

'''{인덱스:>길이}.format(값)'''

print('{0:>10}'.format('python'))
# '    python'



""" 참고로 인덱스를 사용하지 않으면 :(콜론)과 정렬 방법만 지정해도 된다."""

print('{:>10}'.format('python'))
# '    python'


# 300.p 숫자 개수 맞추기

""" %d는 다음과 같이 %와 d 사이에 0과 숫자 개수를 넣어주면 자릿수에 맞춰서 앞에 0이 들어간다. 즉,
%03로 지정하면 1은 '001', 35는 '035'가 된다. {}를 사용할 때는 인덱스나 이름 뒤에 :(콜론)을 붙이고 03d처럼 0과
숫자 개수를 지정하면 된다. """


""" '%0개수d' % 숫자"""
print('%03d' % 1)
# 001




""" '{인덱스 : 0개수d}'.format(숫자)'"""

print('{0:03d}'.format(35))
# 035


""" 물론 실수도 숫자 개수를 맞출 수 있다. 특히 소수점 이하 자릿수를 지정하고 싶으면 %08.2f처럼 .(점)뒤에 자릿수를
지정해 준다."""


""" '%0개수.자릿수f'% 숫자"""

print('%8.2f' % 3.6)
# 3.60


""" '{인덱스:0개수.자릿수f}'.format(숫자)"""



print('{0:08.2f}'.format(150.37))
# 00150.37



# 채우기와 정렬을 조합해서 사용하기

""" 문자열 포매팅은 채우기와 정렬을 조합해서 사용할 수 있다. 다음과 같이 {}에 인덱스, 채우기, 정렬, 길이, 자릿수, 지료형 
순으로 지정해 준다."""

""" *'{인덱스: [[채우기]정렬][길이][.자릿수][자료형]}'"""


""" 그럼 길이를 10으로 만든 뒤 왼쪽, 오른쪽으로 정렬하고 남은 공간은 0으로 채워본다."""

print('{0:0<10}'.format(15))    # 길이 10, 왼쪽으로 정렬하고 남는 공간은 0으로 채움
# 0000000015


print('{0:0>10}'.format(15))    # 길이 10, 오른쪽으로 정렬하고 남는 공간은 0으로 채움
# 0000000015



""" 물론 실수로 만들고 싶다면 다음과 같이 소수점 자릿수와 실수 자료형 f를 지정해주면 된다."""
print('{0:0>10.2f}'.format(15))
# 0000015.00





""" 특히 채우기 부분에 0이 아닌 다른 문자를 넣어도 된다. 공백을 넣어도 되고,
문자를 넣어도 된다. 만약 채우기 부분을 생략하면 공백이 들어간다."""

print('{0: >15}'.format(15))    # 남는 공간을 공백으로 채움

print('{0:>10}'.format(15))     # 채우기 부분을 생략하면 공백이 들어감

print('{0:x>10}'.format(15))    # 남는 공간을 문자 x로 채움

