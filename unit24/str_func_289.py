# 소문자를 대문자로 바꾸기

"""upper()는 문자열의 문자를 모두 대문자로 바꾼다. 만약 대문자가 있다면 그대로 유지가 된다."""

print('python'.upper())
# PYTHON

# 대문자를 소문자로 바꾸기

""" lower()는 문자열의 문자를 모두 소문자로 바꾼다. 만약 문자열에 안에 소문자가 있다면 그대로 유지가 된다."""

print('PYTHON'.lower())
# python


# 왼쪽 공백 삭제하기
""" lstrip()은 문자열에서 왼쪽에 있는 연속된 모든 공백을 삭제한다."""


print('    Python    '.lstrip())


# 오른쪽 공백 삭제하기
""" rstrip()은 문자열에서 오른쪽에 있는 연속된 모든 공백을 삭제한다."""

print('    Python    '.rstrip())


# 양쪽 공백 삭제하기
""" strip()은 문자열에서 양쪽에 있는 연속된 모든 공백을 삭제한다."""

print('    Python    '.strip())


# 왼쪽의 특정 문자 삭제하기

"""lstrip('삭제할문자')과 같이 삭제할 문자들을 문자열 형태로 넣어주면 문자열 왼쪽에
엤는 해당 문자를 삭제한다. 다음은 문자열 왼쪽의 ,(콤마) .(점)을 삭제한다. 단, 여기서는 공백을 넣지 않아서 공백은 그대로 둔다."""

print(', python.'.lstrip(',.'))


# 오른쪽 특정 문자 삭제하기

""" rstrip('삭제할 문자들')과 같이 삭제할 문자들을 문자열 형태로 넣어주면 문자열 오른쪽에 있는 해당 문자를 삭제한다.
다음은 문자열의 오른쪽의 ,(콤마)와 .(점)을 삭제한다. 마찬가지로 공백을 넣지 않았으므로 공백은 그대로 둔다."""

print(', python.'.rstrip(',.'))


# 양쪽의 특정 문자 삭제하기

""" strip('삭제할 문자들')과 같이 삭제할 문자들을 문자열 형태로 넣어주면 문자열 양쪽에 있는 해당 문자를 삭제한다. 다음은
문자열 양쪽의 ,(콤마) .(점)을 삭제한다. """

print(',python.'.strip(',.'))


# 참고: 구두점을 간단하게 삭제하기

""" string 모듈의 punctuation에는 모든 구두점이 있다. 다음과 같이 strip 메서드에 string.punctuation을
넣으면 문자열 양쪽의 모든 구두점을 간단하게 삭제할 수 있다."""

import string
print(', python.'.strip(string.punctuation))
# python
print(string.punctuation)
# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~


""" 메서드 체이닝을 활용"""

print(', python.'.strip(string.punctuation).strip())






# 문자열을 왼쪽 정렬하기

"""ljust(길이)는 문자열을 지정된 길이로 만든 뒤 왼쪽으로 정렬하며 남는 공간을 공백으로 채운다.
다음은 문자열 'python'의 길이를 10으로 만든 뒤 왼쪽으로 정렬하고 남는 공간을 공백 4칸으로 채운다."""


print('python'.ljust(10))
# 'python    '


# 문자열을 오른쪽 정렬하기

"""rjust(길이)는 문자열을 지정된 길이로 만든 뒤 오른쪽으로 정렬하며 남는 공간은 공백으로 채운다.
다음은 문자열 'python'의 길이를 10으로 만든 뒤 오른쪽으로 정렬하고 남는 공간을 공백 4칸으로 채운다."""


print('python'.rjust(10))
#'    python'




# 문자열을 가운데 정렬하기

"""center(길이)는 문자열을 지정된 길이로 만든 뒤 가운데로 정렬하여 남은 공간을 공백으로 채운다. 다음은 문자열
'python'의 길이를 10으로 만든 뒤 가운데로 정렬하고 양옆의 남는 공간을 2칸씩 채운다."""


print('python'.center(10))


"""만약 가운데로 정렬했을 때 전체 길이와 남는 공간이 모두 홀수가 된다면 왼쪽에 공백이 한 칸 더 들어간다."""

print('python'.center(11))






# 메서드 체이닝

""" 메서드를 계속 연결해서 호출하는 메서드 체이닝이 가능하다. 메서드 체이닝은 메서드를 줄줄이 연결한다고 해서 메서드 체이닝
(method chanining)이라 부른다. 다음은 문자열을 오른쪽으로 정렬한 뒤 대문자로 바꾼다."""

print('python'.rjust(10).upper())

#'    PYTHON'




# 문자열 왼쪽에 0 채우기

""" 파이썬을 사용하다 보면 문자열 왼쪽에 0을 채워야 할 경우가 생긴다.
zfill(길이)는 지정된 길이에 맞춰서 문자열의 왼쪽에 0을 채운다. 단, 문자열의 길이보다 지정된 길이가 짧다면 아무것도 채우지 않는다.
보통 zfill은 숫자를 일정 자릿수로 맞추고 앞자리는 0으로 채울 때 사용한다."""

print('35'.zfill(4))
# 0035


print('3.5'.zfill(6))
# 0003.5


print('hello'.zfill(10))
# 00000hello



# 문자열 위치 찾기

""" find('찾을문자열')은 문자열에서 특정 문자열을 찾아서 인덱스를 반환하고, 문자열이 없으면 -1을 반환한다. find는 왼쪽에서부터 문자열을
 찾는데, 같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스를 반환한다. 여기서는 'pl'이 2개 있지만 왼쪽에서 처음 찾은 'pl'의 인덱스
 2를 반환한다."""

print('apple pineapple'.find('pl'))
# 2
print('apple pineapple'.find('xy'))
# -1



# 오른쪽에서부터 문자열 위치 찾기

""" rfind('찾을문자열')은 오른쪽에서부터 특정 문자열을 찾아서 인덱스를 반환하고, 문자열이 없으면 -1을 반환한다.
같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스를 반환한다. 여기서는 'pl'이 2개 있지만
처음 찾은 'pl'의 인덱스 12를 반환한다."""


print('apple pineapple'.rfind('pl'))
# 12

print('apple pineapple'.rfind('xy'))
# -1



# 문자열 위치 찾기

""" find, rfind 이외에도 index, rindex로 문자열의 위치를 찾을 수 있다."""


""" index('찾을문자열')은 왼쪽에서부터 특정 문자열을 찾아서 인덱스를 반환한다. 단, 문자열이 없으면 에러를 발생한다.
index도 같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스를 반환한다."""


print('apple pineapple'.index('pl'))
# 2



# 오른쪽에서부터 문자열 위치 찾기

""" rindex('찾을문자열')은 오른쪽에서부터 특정 문자열을 찾아서 인덱스를 반환한다. 마찬가지로 문자열이 없으면 에러를 발생시키며
같은 문자열이 여러 개일 경우 처음 찾은 문자열의 인덱스를 반환한다."""

print('apple pineapple'.rindex('pl'))
# 12


# 문자열 개수 세기

""" count('문자열')"""

print('apple pineapple'.count('pl'))

# 2 